namespace Gry.Workers;public interface IAsyncWorker : IDisposable, IAsyncDisposable{    bool CancellationRequested { get; }    bool Canceled { get; }    bool Idle { get; }    bool Stopped { get; }    bool Faulted { get; }    void Cancel();}public interface IAsyncWorker<T, Y> : IAsyncWorker, IObservable<AsyncWorkItem<Y>>{    void Next(string id, Action<Y> handler);    bool Execute(AsyncWorkItem<T> work);    public void Execute(AsyncWorkItem<T> work, Action<Y> handler)    {        Next(work.Id, handler);        Execute(work);    }    public void Execute(string id, T value, Action<Y> handler)    {        Next(id, handler);        Execute(new(id, value));    }   }public interface IAsyncWorker<Y> : IAsyncWorker<NullValue, Y>{    public void Execute(string id, Action<Y> handler)    {        Next(id, handler);        Execute(new(id, NullValue.Default));    }}