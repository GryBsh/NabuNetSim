using Gry.Serialization;using System;using System.Collections.Generic;using System.Linq;using System.Reflection;using System.Text;using System.Threading.Tasks;using YamlDotNet.Serialization;namespace Gry.Settings;public class SettingsProvider(ISerializeProvider serializerProvider){    static ISerializerOptions SerializerOptions { get; } = new SerializerOptions { LowerFirst = false, Compress = false };    static string SettingsFileName { get; } = "appsettings.json";    static string SettingsFilePath => Path.Combine(AppContext.BaseDirectory, SettingsFileName);    ISerialize? Serializer => serializerProvider.For("json");    public void SaveSettings<T>(string section, T? settings)    {        if (Serializer is null) return;        var settingsFile = GetAppSettings();        if (settingsFile is null) return;        settingsFile[section] = settings;        File.Copy(SettingsFilePath, $"{SettingsFilePath}.bak", true);        var reader = Serializer.Serialize(new SerializerOptions { LowerFirst = false, Compress = false }, settingsFile);        using var writer = new StreamWriter(SettingsFilePath, false);        var content = reader?.ReadToEnd();        writer.Write(content);        writer.Flush();    }    public T? FromSection<T>(string name)    {        if (Serializer is null) return default;        var settingsFile = GetAppSettings();        if (settingsFile is null) return default;        if (settingsFile.TryGetValue(name, out var settings))        {            return settings.ToObject<T>();        }        return default;    }    private IDictionary<string, dynamic>? GetAppSettings()    {        if (!File.Exists(SettingsFilePath)) return null;        using var reader = new StreamReader(SettingsFilePath);        var r = Serializer?.Deserialize<IDictionary<string, dynamic>>(                    SerializerOptions,                    reader                )?.FirstOrDefault() ??                null;        return r;    }    public IEnumerable<SettingValue> Settings<TOptions>(TOptions? options)        where TOptions : new()        => GetSettings(options);    #region Extract Settings    public static IEnumerable<SettingValue> GetSettings<TOptions>(TOptions? options)        where TOptions : new()    {        var type = typeof(TOptions);        var newSettings = new List<SettingValue>();        foreach (var property in type?.GetProperties() ?? [])        {            var attribute = property.GetCustomAttribute<SettingAttribute>();            if (attribute is null)                continue;            newSettings.Add(                new SettingValue(                    property.Name,                    attribute.Label,                    attribute.Section,                    attribute.Description,                    property.PropertyType,                    property.GetValue,                    property.SetValue,                    options ?? new(),                    attribute.Options,                    attribute.Advanced                )            );        }        return newSettings;    }    #endregion}