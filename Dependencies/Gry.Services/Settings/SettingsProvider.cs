using Gry.Serialization;using System;using System.Collections.Generic;using System.Linq;using System.Reflection;using System.Text;using System.Threading.Tasks;using YamlDotNet.Serialization;namespace Gry.Settings;public class SettingsProvider(ISerializeProvider serializerProvider){    static ISerializerOptions SerializerOptions { get; } = new SerializerOptions { LowerFirst = false, Compress = false };    static string SettingsFileName { get; } = "appsettings.json";        ISerialize? JSON => serializerProvider.For("json");    public bool SaveSettings<T>(ILocationService location, string? path, string section, T? settings)    {        if (JSON is null) return false;        if (section is not null)        {            try            {                (path, var settingsFile) = GetSettings(location, path);                if (settingsFile is null || path is null) return false;                settingsFile[section] = settings;                File.Copy(path, $"{path}.bak", true);                var reader = JSON.Serialize(new SerializerOptions                {                    LowerFirst = false,                    Compress = false                }, settingsFile);                using var writer = new StreamWriter(path, false);                var content = reader?.ReadToEnd();                writer.Write(content);                writer.Flush();                return true;            }            catch { return false; }        }        return false;    }    public T? FromSection<T>(ILocationService location, string? path, string name)    {        if (JSON is null) return default;                var (_, settingsFile) = GetSettings(location, path);        if (settingsFile is null) return default;        if (settingsFile.TryGetValue(name, out var settings))        {            return settings?.ToObject<T>();        }        return default;    }    private (string?, IDictionary<string, dynamic>?) GetSettings(ILocationService location, string? path)    {        path = string.IsNullOrWhiteSpace(path) ? Path.Combine(location.GetPath("home"), SettingsFileName) : path;        if (!File.Exists(path)) return (null, null);        using var reader = new StreamReader(path);        var settings = JSON?.Deserialize<IDictionary<string, dynamic>>(                    SerializerOptions,                    reader                )?.FirstOrDefault() ??                null;        return (path, settings);    }    public IEnumerable<SettingValue> Settings<TOptions>(TOptions? options)        where TOptions : new()        => GetSettings(options);    #region Extract Settings    public static IEnumerable<SettingValue> GetSettings<TOptions>(TOptions? options)        where TOptions : new()    {        var type = typeof(TOptions);        var newSettings = new List<SettingValue>();        foreach (var property in type?.GetProperties() ?? [])        {            var attribute = property.GetCustomAttribute<SettingAttribute>();            if (attribute is null)                continue;            newSettings.Add(                new SettingValue(                    property.Name,                    attribute.Label,                    attribute.Section,                    attribute.Description,                    property.PropertyType,                    property.GetValue,                    property.SetValue,                    options ?? new(),                    attribute.Options,                    attribute.Advanced                )            );        }        return newSettings;    }    #endregion}