
@using CodeHollow.FeedReader;
@using ReactiveUI
@using Nabu.Adaptor;
@inherits ReactiveComponentBase<HomeViewModel>

@if (ViewModel!.Loaded)
{
    <Div Class="main-menu container-fluid">
        <div Class="row row-divider" />
        <div class="row">
            <ul class="news list-group list-group-flush list-group-horizontal-sm">
                <li class="list-group-item center"><small>NABUNetwork.com News</small></li>
                <Virtualize TItem="TickerItem" Items="ViewModel!.Headlines">
                    <li class="list-group-item center"><small><a target="_blank" href="@context?.Link">@context?.Title</a></small></li>
                </Virtualize>
                <li class="list-group-item center"><small><a target="_blank" href="https://www.nabunetwork.com">More...</a></small></li>
            </ul>
        </div>
        <div Class="row row-divider" /> 
        <div class="row" style="height: 400px">
            <div class="col flex-fill title-col">
                <div class="container-fluid title-box">
                    <div class="row">
                       
                        <div class="col">
                            <Image class="logo" Source="_content/Nabu.NetSim.UI/nabu.png" />

                        </div>
                        <div class="col top">
                            <div><small>Adaptors</small></div>
                            <ul class="news list-group list-group-flush">
                                <Virtualize TItem="SerialAdaptorSettings" Items="@ViewModel!.Serial">
                                    <li class="list-group-item">
                                        <large><Icon Name="IconName.Plug"/></large>
                                        <a href="#" onclick="@(() => { ViewModel.Menu.SetSelected(context); })">@context.Port:@ViewModel!.AdaptorStatus(context)</a><br/>
                                        <large><Icon Name="IconName.Folder"/></large>
                                        @context.Source/@(
                                    !string.IsNullOrWhiteSpace(context.Image) ? context.Image : "Main"
                                    )                                
                                    </li>
                                </Virtualize>
                                <Virtualize TItem="TCPAdaptorSettings" Items="@ViewModel!.TCP">
                                    <li class="list-group-item">
                                        <large><Icon Name="IconName.Wifi"/></large>
                                        <a href="#" onclick="@(() => { ViewModel.Menu.SetSelected(context); })">@context.Port:@ViewModel!.AdaptorStatus(context)</a><br/>
                                        <large><Icon Name="IconName.Folder"/></large>
                                        @context.Source/@(
                                            !string.IsNullOrWhiteSpace(context.Image) ? context.Image : "Main"
                                        )                                
                                    </li>
                                </Virtualize>
                            </ul>
                            <div><small>Connections</small></div>
                            <ul class="news list-group list-group-flush">
                                <Virtualize TItem="TCPAdaptorSettings" Items="@TCPAdaptor.Connections.Values">
                                    <li class="list-group-item">
                                        <large><Icon Name="IconName.Wifi"/></large>
                                        <a href="#" onclick="@(() => { ViewModel.Menu.SetSelected(context); })">@context.Port:@ViewModel!.AdaptorStatus(context)</a><br/>
                                        <large><Icon Name="IconName.Folder"/></large>
                                        @context.Source/@(
                                            !string.IsNullOrWhiteSpace(context.Image) ? context.Image : "Main"
                                        )                                
                                    </li>
                                </Virtualize>
                                
                            </ul>
                        </div>
                        
                        <MenuView ViewModel="@ViewModel!.Menu" />
                        
                    </div>
                </div>
            </div>
        </div>
        <div class="row row-divider" />
        


        <Div Class="row" Visibility="@(ViewModel!.LogVisible ? Visibility.Visible : Visibility.Invisible)">
            <br/>
            <div class="log-frame col flex-lg-column">
                <div class="flex-grow-0">
                    <Virtualize TItem="LogEntry" Items="@ViewModel!.Entries">
                        <div><small>@context.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.ffff") @context.Name @context.Message</small></div>
                    </Virtualize>
                </div>
            </Div>
            <br/>
        </Div>
        <Div Class="row row-divider" Visibility="@(ViewModel!.LogVisible ? Visibility.Visible : Visibility.Invisible)"/>
        <!--
        <Div Class="row" Visibility="@(ViewModel!.ChatVisible ? Visibility.Visible : Visibility.Invisible)">
            <br/>
                <RetroNetChatView />
            <br/>
        </Div>
        <Div Class="row row-divider" Visibility="@(ViewModel!.ChatVisible ? Visibility.Visible : Visibility.Invisible)"/>
        -->
    </Div>
} else
{
    @code {
        static string[] Phrases = new[] {
            "👁️🚢👿",
            "Assimilation in progress",
            "Admiral! There be whales here!",
            "Ay Sir, I'm working on it!",
            "You should visit NABUNetwork.com",
            "Stay tuned to the classics on your NABU!",
            "It works for us now, Comrade",
            "Buy Pants.",
            "... Loading ...",
            "9/10 Doctors would prefer not to endorse this product",
            "NABU4Ever!",
            "👸Beware the wrath of King NABU 👸",
            "☎️ Please stay on the line, your call is important to us ☎️"
        };

        string Phrase = Phrases[Random.Shared.Next(0, Phrases.Length)];
    }

    <div>
        <center>@(Phrase)</center>
    </div>
}
