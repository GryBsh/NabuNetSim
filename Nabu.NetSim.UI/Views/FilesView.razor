@inherits ReactiveInjectableComponentBase<FilesViewModel>



<Div Class="center center-all" Visibility="@ViewModel.PlaceHolderVisible">
    <Icon IconSize="@IconSize.x5" Name="@ViewModel.PlaceHolderIconName" Style="color: rgba(204, 204, 204, .2)" />
</Div>

<HeaderView Icon="@IconName.FolderOpen"
            Heading="@Path.GetFileName(ViewModel?.CurrentPath)"
            ShowButton=true
            OnButtonClick="@(() => { ViewModel?.SetRootDirectory(new NullAdaptorSettings()); })"
            Visibility="@ViewModel.Visible" />


<Container Class="top-sm">
    <Row>
        <Column ColumnSize="ColumnSize.Is2">
            <ListGroup Flush Visibility="@ViewModel.Visible" Class="sticky-top sticky-padded-top">
                 <ListGroupItem>
                     <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                         <Div Class="btn-group-vertical">
                             <Span data-bs-toggle="tooltip" title="Upload">
                                 <button type="button" class="btn btn-primary" disabled="@(!ViewModel.ActionEnabled)" onclick="@(() => { ViewModel.ShowUpload = true; })">
                                     <Icon Name="IconName.FileUpload" />
                                 </button>
                             </Span>
                            
                            <Span data-bs-toggle="tooltip" title="Add Folder">
                                <button type="button" class="btn btn-primary" disabled="@(!ViewModel.ActionEnabled)" onclick="@(() => { ViewModel.ShowNewFolder = true; })">
                                    <Icon Name="IconName.FolderPlus" />
                                </button>
                            </Span>
                            <Span data-bs-toggle="tooltip" title="Download">
                                <a class="btn btn-primary @(ViewModel.ActionButtonDisabled || !ViewModel.ActionEnabled ? "disabled" : string.Empty)" href="@ViewModel.DownloadLink(ViewModel.SelectedFile)" download="@ViewModel.SelectedFile?.Name">
                                    <Icon Name="IconName.FileDownload" />
                                </a>
                            </Span>
                             <Span data-bs-toggle="tooltip" title="Delete Folder">
                                 <Button class="btn btn-danger" disabled=@(ViewModel.DeleteFolderDisabled || !ViewModel.ActionEnabled) onclick="@(() => { ViewModel.StartAction(FileViewAction.DeleteFolder, ViewModel.CurrentPath); })" >
                                     <Icon Name="IconName.Delete" />
                                 </Button>
                             </Span>
                             <Span data-bs-toggle="tooltip" title="Copy">
                                 <Button class="btn btn-primary" disabled=@(ViewModel.ActionButtonDisabled || !ViewModel.ActionEnabled) onclick="@(() => { ViewModel.StartAction(FileViewAction.CopyFile); })" >
                                     <Icon Name="@("fa-copy")" />
                                 </Button>
                             </Span>
                             <Span data-bs-toggle="tooltip" title="Move">
                                 <Button class="btn btn-primary" disabled=@(ViewModel.ActionButtonDisabled || !ViewModel.ActionEnabled) onclick="@(() => { ViewModel.StartAction(FileViewAction.MoveFile); })" >
                                     <Icon Name="@("fa-up-down-left-right")" />
                                 </Button>
                             </Span>
                             <Span data-bs-toggle="tooltip" title="Delete">
                                 <Button class="btn btn-danger" disabled=@(ViewModel.ActionButtonDisabled || !ViewModel.ActionEnabled) onclick="@(() => { ViewModel.StartAction(FileViewAction.DeleteFile); })" >
                                     <Icon Name="IconName.Clear" />
                                 </Button>
                             </Span>
                             <Span data-bs-toggle="tooltip" title="Deselect">
                                 <Button class="btn btn-primary" disabled="@(ViewModel.Selected && ViewModel.ActionEnabled ? false : true)" onclick="@(() => { ViewModel?.SetSelectedFile(null); })" >
                                     <Icon Name="IconName.Times" />
                                 </Button>
                             </Span>
                         </Div>

                     </Div>
                 </ListGroupItem>
             </ListGroup>
        </Column>
        <Column Style="padding-top: 10px;">
             <ListGroup Flush Visibility="@ViewModel.Visible">
                @if (ViewModel?.CurrentPath != ViewModel?.RootPath)
                {
                    <ListGroupItem Style="cursor: pointer" onclick="@(() => { ViewModel?.UpDirectory(); })" title="Parent Folder">
                        <Icon Name="@IconName.ArrowUp" />
                        ..
                    </ListGroupItem>
                }
                <Repeater TItem="DirectoryModel" Items="@ViewModel!.Directories">
                    <ListGroupItem @key=context Style="cursor: pointer" onclick="@(() => { ViewModel.SetCurrentDirectory(context.Path); })" title="@context.Name">
                        <Icon Name="@IconName.Folder" />
                        @context.Name
                    </ListGroupItem>
                </Repeater>
                <Repeater TItem="FileModel" Items="@ViewModel!.Files">
                    <ListGroupItem @key=context Class="@(context.Path == ViewModel.SelectedFile?.Path ? "highlight" : "")"
                                   Style="cursor: pointer"
                                   onclick="@(() => { ViewModel.SetSelectedFile(context); })"
                                   title="@(context.IsSymLink ? $"{context.Name} (link)" : context.Name)">
                        <Icon Name="@IconName.FileAlt" />
                        <Span Style="@(context.IsSymLink ? "color: lightgrey" : string.Empty)">@context.Name</Span>
                    </ListGroupItem>
                </Repeater>
            </ListGroup>
        </Column>
    </Row>
    
</Container>
<Container Class="sticky-bottom" Style="padding-bottom: 10px">
    <Row>
        <Column>
            <ListGroup Flush Visibility="@ViewModel.Visible">
                 <ListGroupItem Visibility="@(ViewModel.ConfirmVisible)">
                     <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100" Height="Height.Auto" VerticalAlignment="VerticalAlignment.Middle">
                         <Div Visibility="ViewModel.CopyMoveVisible">
                             <small>Navigate to Destination</small>
                         </Div>
                         <Div Visibility="@(ViewModel.DeleteVisible)">
                             <small>Are you sure?</small>
                         </Div>
                         <Div>
                             <Span data-bs-toggle="tooltip" title="Confirm">
                                 <Button class="btn btn-success" onclick="@(() => { ViewModel.CompleteAction(); })">
                                     <Icon Name="IconName.Check" />
                                 </Button>
                             </Span>

                             <Span data-bs-toggle="tooltip" title="Reject">
                                 <Button class="btn btn-danger" onclick="@(() => { ViewModel.CancelAction(); })">
                                     <Icon Name="IconName.Times" />
                                 </Button>
                             </Span>
                         </Div>
                     </Div>
                 </ListGroupItem>
                 <ListGroupItem Visibility="@(ViewModel.NewFolderVisible)">
                     <Div Flex="Flex.JustifyContent.Between">
                         <div>
                             <TextEdit @bind-Text=@ViewModel.NewFolderName Placeholder="Name?" />
                         </div>

                         <div>
                             <Span data-bs-toggle="tooltip" title="Create">
                                 <button type="button" class="btn btn-success" onclick="@(() => { ViewModel.NewFolder(); })">
                                     <Icon Name="IconName.Check" />
                                 </button>
                             </Span>
                             <Span data-bs-toggle="tooltip" title="Cancel">
                                 <button type="button" class="btn btn-danger" onclick="@(() => { ViewModel!.ShowNewFolder = false; })" >
                                     <Icon Name="IconName.Times" />
                                 </button>
                             </Span>
                         </div>

                     </Div>
                 </ListGroupItem>
                 <ListGroupItem Visibility="@(ViewModel.ShowUpload ? Visibility.Visible : Visibility.Invisible)">
                     <Div Flex="Flex.JustifyContent.Between">
                         <Div Class="hstack" Width="@Width.Is75">
                             <InputFile OnChange="@ViewModel.Upload" />
                         </Div>
                         <Div Class="hstack">
                             <Span data-bs-toggle="tooltip" title="Cancel">
                                 <button type="button" class="btn btn-danger" onclick="@(() => { ViewModel!.ShowUpload = false; })" >
                                     <Icon Name="IconName.Times" />
                                 </button>
                             </Span>
                         </Div>
                     </Div>
                 </ListGroupItem>
                 <ListGroupItem Visibility="@ViewModel.UploadVisible">
                     Uploading...
                 </ListGroupItem>
                 <ListGroupItem Visibility="@ViewModel.AlertVisible">
                     <Alert @bind-Visible=@ViewModel.AlertActive Color="@(ViewModel.AlertState is AlertState.Info ? Color.Success : ViewModel.AlertState is AlertState.Warning ? Color.Warning : Color.Danger)">
                         <AlertMessage>@ViewModel.AlertText</AlertMessage>
                     </Alert>
                 </ListGroupItem>
             </ListGroup>
         </Column>
     </Row>
 </Container>


