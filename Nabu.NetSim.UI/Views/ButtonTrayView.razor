@inherits ReactiveInjectableComponentBase<ButtonTrayViewModel>
<Div Class="hstack gap-1">
    <button type="button" 
            class="btn @(ViewModel!.Home.IsVisible(VisiblePage.Adaptors) is Visibility.Visible ? "btn-success" : "btn-primary")" 
            disabled="@(ViewModel!.Home.IsVisible(VisiblePage.Adaptors) is Visibility.Visible)"
            onclick="@(() => { ViewModel.Home.SetVisible(VisiblePage.Adaptors); })" title="Home">
        <Icon Name="IconName.Home" />
    </button>
    <button type="button" 
            class="btn @(ViewModel!.Home.IsVisible(VisiblePage.Logs) is Visibility.Visible ? "btn-success" : "btn-primary")" 
            disabled="@(ViewModel!.Home.IsVisible(VisiblePage.Logs) is Visibility.Visible)"
            onclick="@(() => { ViewModel!.Home.SetVisible(VisiblePage.Logs); })" title="Show Logs">
        <Icon Name="IconName.BookReader" />
    </button>
    <button type="button" 
            class="btn @(ViewModel!.Home.IsVisible(VisiblePage.Packages) is Visibility.Visible ? "btn-success" : "btn-primary")" 
            disabled="@(ViewModel!.Home.IsVisible(VisiblePage.Packages) is Visibility.Visible)" 
            onclick="@(() => { ViewModel.Home.SetVisible(VisiblePage.Packages); })" title="Packages">
        <Icon Name="IconName.Store" />
    </button>
    <!--<button type="button"
            class="btn @(ViewModel!.Home.IsVisible(VisiblePage.Settings) is Visibility.Visible ? "btn-success" : "btn-primary")"
            disabled="@(ViewModel!.Home.IsVisible(VisiblePage.Settings) is Visibility.Visible)"
            onclick="@(() => { ViewModel.Home.SetVisible(VisiblePage.Settings); })" title="Settings">
        <Icon Name="IconName.SliderHorizontal" />
    </button>-->
</Div>


