@inherits ReactiveInjectableComponentBase<AdaptorSettingsViewModel>



<Div Class="center center-all" Visibility="@(ViewModel?.Selected is NullAdaptorSettings ? Visibility.Visible : Visibility.Invisible)" >
    <Icon IconSize="@IconSize.x5" Name="@IconName.Home" Style="color: rgba(204, 204, 204, .2)" />
</Div>

<HeaderView Icon="@(ViewModel?.Selected is TCPAdaptorSettings ? IconName.Wifi : IconName.Plug)"
            Heading="@ViewModel?.Selected.Port"
            ShowButton=true
            OnButtonClick="@(() => { ViewModel?.SetSelected(new NullAdaptorSettings()); })" 
            Visibility="@(ViewModel?.Selected is not NullAdaptorSettings ? Visibility.Visible : Visibility.Invisible)"/>
    
<ListGroup Flush Visibility="@(ViewModel?.Selected is not NullAdaptorSettings ? Visibility.Visible : Visibility.Invisible)">
    <ListGroupItem>
            <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
            <Heading Size="HeadingSize.Is6" Margin="Margin.Is1.FromBottom">
                <Icon Name="IconName.Server" />
                Source
            </Heading>
        </Div>
        <Paragraph Class="top-sm" Margin="Margin.Is1.FromBottom">
            <Select TValue="string" SelectedValue="@ViewModel?.Selected.Source"
                    SelectedValueChanged="@(v => ViewModel?.SetSource(v))">
                @foreach (var source in ViewModel!.SourceNames)
                {
                    <SelectItem @key=@source value="@source">@source</SelectItem>
                }
            </Select>
        </Paragraph>
    </ListGroupItem>
    <ListGroupItem Visibility="@(ViewModel!.HasMultipleImages ? Visibility.Visible : Visibility.Invisible)">
        <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
            <Heading Size="HeadingSize.Is6" Margin="Margin.Is1.FromBottom">
                <Icon Name="IconName.FolderOpen" />
                Program
            </Heading>
        </Div>
        <Paragraph Class="top-sm" Margin="Margin.Is1.FromBottom">
            <Select TValue="string" SelectedValue=@ViewModel.Selected.Program 
                    SelectedValueChanged="@(v => ViewModel.SetImage(v))">
                <!--<option value=""></option>-->
                <Repeater TItem="AvailableImage" Items="ViewModel.Images">
                    <SelectItem @key=@context Value="@context.Name">@context.DisplayName</SelectItem>
                </Repeater>
            </Select>
        </Paragraph>
    </ListGroupItem>
    <ListGroupItem>
        <Div Class="hstack">
            <Button Type="ButtonType.Button" 
                    Class="btn btn-primary" 
                    onclick="@(() => ViewModel.SetFilesPath(ViewModel.Selected.StoragePath))" 
                    data-bs-toggle="tooltip"
                    title="Browse Storage" 
                    Visibility="@ViewModel.BrowseVisible">
                <Icon Name="IconName.FolderOpen" />
            </Button>
            <Div data-bs-toggle="tooltip" title="Start Emulator">
                <Button Type="ButtonType.Button" Class="btn-primary" Visibility=@ViewModel.RunVisibility Disabled=@(!ViewModel.RunAvailable) onclick="@(() => ViewModel.RunEmulator())" >
                    <Icon Name="IconName.Running" />
                </Button>
            </Div>
        </Div>
    </ListGroupItem>
</ListGroup>
    

