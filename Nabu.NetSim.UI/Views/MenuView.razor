@inherits ReactiveComponentBase<MenuViewModel>


@if (ViewModel?.Selected is NullAdaptorSettings)
{
    <Div Class="center center-all" >
        <Icon IconSize="@IconSize.x5" Name="@IconName.Home" Style="color: rgba(204, 204, 204, .2)" />
    </Div>

}
else
{
    <ul class="menu list-group list-group-flush list-group-sm" style="padding: 0px">

        <li class="list-group-item">
            <Div Class="row">
                <Div Class="col">
                    <Div Class="hstack gap-3">
                        <button type="button" class="btn btn-primary" onclick="@(() => { ViewModel!.Selected = new NullAdaptorSettings(); })">
                            <div class="hstack gap-1">
                                <Icon Name="IconName.Times" />
                            </div>
                        </button>
                        @if (ViewModel?.Selected is TCPAdaptorSettings)
                        {
                            <Icon IconSize=@IconSize.Large Name="IconName.Wifi" />
                        }

                        else
                        {
                            <Icon IconSize=@IconSize.Large Name="IconName.Plug" />
                        }
                        <div>@ViewModel?.Selected.Port</div>
                    </Div>
                </Div>
            </Div>
        </li>
        <li class="list-group-item">
            <Icon Name="IconName.Server" />
            Source
            <Select TValue="string" SelectedValue="@ViewModel?.Selected.Source"
            SelectedValueChanged="@(v => ViewModel?.SetSource(v))">
                @foreach (var source in ViewModel!.SourceNames)
                {
                    <SelectItem @key=@source value="@source">@source</SelectItem>
                }
            </Select>
        </li>
        <li class="list-group-item @(ViewModel!.HasMultipleImages ? "" : "invisible")">
            <Icon Name="IconName.FolderOpen" />
            Program
            <Select TValue="string" SelectedValue=@ViewModel.Selected.Image SelectedValueChanged="@(v => ViewModel.SetImage(v))">
                <!--<option value=""></option>-->
                @foreach (var available in ViewModel.Images)
                {
                    <SelectItem @key=@available Value="@available.Name">@available.DisplayName</SelectItem>
                }
            </Select>
        </li>
        <li class="list-group-item">
            <Icon Name="IconName.Save" />
            Storage Path
            <TextEdit @bind-Text="@ViewModel.Selected.StoragePath"></TextEdit>
        </li>
    </ul>
}


<!--<Div Class="col col-4 top" Visibility=@ViewModel!.IsVisible(MenuPage.CLI)>
    <ul class="menu list-group list-group-flush list-group-sm">
        <li class="list-group-item">
            <Icon IconSize=@IconSize.Large Name="IconName.Backward" />
            <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.MainMenu))">Back</a>
        </li>

    </ul>
</Div>-->




