@inherits ReactiveComponentBase<MenuViewModel>

<Div Class="col col-4 top" Visibility=@ViewModel!.IsVisible(MenuPage.MainMenu)>
    <ul class="menu list-group list-group-flush list-group-sm">
        <li class="list-group-item">
            <Icon Name="IconName.SliderHorizontal" />
            <a href="#" onclick="@(() => ViewModel!.SetVisible(MenuPage.Adaptors))">Adaptors</a>
        </li>
        <li class="list-group-item">
            <Icon Name="IconName.List" />
            <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.Connections))">Connections</a>
        </li>
        <li class="list-group-item">
            <Icon Name="IconName.Adjust" />
            <a href="#" onclick="@(() => ViewModel!.SetVisible(MenuPage.Settings))">Settings</a>
        </li>
        <li class="list-group-item"><Icon Name="IconName.BookReader" />
            <a href="#" onclick="@(() => ViewModel!.Log.ToggleVisible())">@ViewModel.Log.ButtonText</a>
        </li>
    </ul>
</Div>

<Div Class="col col-4 top" Visibility=@ViewModel!.IsVisible(MenuPage.Settings)>
    <ul class="menu list-group list-group-flush list-group-sm">
        <li class="list-group-item">
            <div class="hstack">
                <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.MainMenu))"><Icon IconSize=@IconSize.Large Name="IconName.Home" /></a>
                <div class="vr"></div>
                <Icon IconSize=@IconSize.Large Name="IconName.Adjust" />
                <div><small>Settings</small></div>
            </div>
        </li>
        <li class="list-group-item">
            <Icon Name="IconName.BalanceScale" />
            <a href="#" onclick="@(() => ViewModel!.SetVisible(MenuPage.Features))">Features</a>
        </li>
        
    </ul>
</Div>

<Div Class="col col-4 top" Visibility=@ViewModel!.IsVisible(MenuPage.Features)>
    <ul class="menu list-group list-group-flush list-group-sm">
        <li class="list-group-item">
            <div class="hstack gap-1">
                <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.MainMenu))"><Icon IconSize=@IconSize.Large Name="IconName.Home" /></a>
                <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.Settings))"><Icon IconSize=@IconSize.Large Name="IconName.Backward" /></a>
                <div class="vr"></div>
                <Icon IconSize=@IconSize.Large Name="IconName.BalanceScale" />
                <div><small>Features</small></div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row">
                <div class="col col-1"><Check TValue="bool" Checked="@(ViewModel.Settings.EnablePython)" Disabled=true ReadOnly=true/></div>&nbsp;
                <div class="col margin-auto">Python Protocol Support</div>
            </div>
            <div class="row">
                <div class="col col-1"><Check TValue="bool" Checked="@(ViewModel.Settings.EnableJavaScript)" Disabled=true ReadOnly=true /></div>&nbsp;
                <div class="col margin-auto">JavaScript Protocol Support</div>
            </div>
        </li>
        
    </ul>
</Div>
<Div Class="col col-4 top" Visibility=@ViewModel!.IsVisible(MenuPage.Adaptors)>
    <ul class="menu list-group list-group-flush list-group-sm">
        <li class="list-group-item">
            <div class="hstack gap-1">
                <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.MainMenu))"><Icon IconSize=@IconSize.Large Name="IconName.Home" /></a>
                <div class="vr"></div>
                <Icon IconSize=@IconSize.Large Name="IconName.SliderHorizontal" />
                <div><small>Adaptors</small></div>
            </div>
        </li>
    @foreach (var serial in ViewModel!.Serial)
    {
        <li @key=serial class="list-group-item">
            <Icon Name="IconName.Plug" />
            <a href="#" onclick="@(() => { ViewModel.SetSelected(serial); })">@serial.Port</a>
        </li>
    }
    @foreach (var tcp in ViewModel!.TCP)
    {
        <li @key=tcp class="list-group-item">
            <Icon Name="IconName.Wifi" />
            <a href="#" onclick="@(() => { ViewModel.SetSelected(tcp); })">TCP:@tcp.Port</a>
        </li>
    }
        
    </ul>
</Div>
<Div Class="col col-4 top" Visibility=@ViewModel!.IsVisible(MenuPage.Connections)>
    <ul class="menu list-group list-group-flush list-group-sm">
        <li class="list-group-item">
            <div class="hstack gap-1">
                <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.MainMenu))"><Icon IconSize=@IconSize.Large Name="IconName.Home" /></a>
                <div class="vr"></div>
                <Icon IconSize=@IconSize.Large Name="IconName.List" />
                <div><small>Connections</small></div>
            </div>
        </li>
    @foreach (var conn in ViewModel.Connections)
    {
        <li @key=conn class="list-group-item">
            <Icon Name="IconName.Wifi" />
            <a href="#" onclick="@(() => { ViewModel.SetSelected(conn); })">TCP:@conn.Port</a>
        </li>
    }
    </ul>
</Div>
<Div Class="col col-4 top" Visibility=@ViewModel!.IsVisible(MenuPage.AdaptorSettings)>
    <ul class="menu list-group list-group-flush list-group-sm">
        
        <li class="list-group-item">
            <div class="hstack gap-1">
                <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.MainMenu))"><Icon IconSize=@IconSize.Large Name="IconName.Home" /></a
        @if (ViewModel.IsClient) {
                <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.Connections))"><Icon IconSize=@IconSize.Large Name="IconName.Backward" /></a>
        } else {
                <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.Adaptors))"><Icon IconSize=@IconSize.Large Name="IconName.Backward" /></a>
        }

                <div class="vr"></div>
        @if (ViewModel.IsClient || ViewModel.Selected is TCPAdaptorSettings) {
                <Icon IconSize=@IconSize.Large Name="IconName.Wifi" />
        } 
        else 
        {
                <Icon IconSize=@IconSize.Large Name="IconName.Plug" />
        }
                <div><small>@ViewModel.Selected.Port</small></div>
                <i/>
        @if (!ViewModel.IsClient) {
                <div class="vr"></div>
                <a href="#" onclick="@(() => ViewModel!.Home.ToggleAdaptor(ViewModel.Selected))"><Icon IconSize=@IconSize.Large Name="@ViewModel!.AdaptorButtonIcon(ViewModel.Selected)" /></a>
        }
            </div>
        </li>
        <li class="list-group-item">
            <Icon Name="IconName.Server" />
            Source
            <Select TValue="string" SelectedValue="@ViewModel.Selected.Source"
                    SelectedValueChanged="@(v => ViewModel.SetSource(v))">
                @foreach (var source in ViewModel!.SourceNames)
                {
                    <SelectItem @key=@source value="@source">@source</SelectItem>
                }
            </Select>
        </li>
        <li class="list-group-item @(ViewModel!.HasMultipleImages ? "" : "invisible")">
            <Icon Name="IconName.FolderOpen" />
            Program
            <Select TValue="string" SelectedValue=@ViewModel.Selected.Image SelectedValueChanged="@(v => ViewModel.SetImage(v))">
                <!--<option value=""></option>-->
                @foreach (var available in ViewModel.Images)
                {
                    <SelectItem @key=@available Value="@available.Name">@available.DisplayName</SelectItem>
                }
            </Select>
        </li>
        <li class="list-group-item">
            <Icon Name="IconName.Save" />
            Storage Path
            <TextEdit @bind-Text="@ViewModel.Selected.StoragePath"></TextEdit>
        </li>
    </ul>
</Div>

<Div Class="col col-4 top" Visibility=@ViewModel!.IsVisible(MenuPage.CLI)>
    <ul class="menu list-group list-group-flush list-group-sm">
        <li class="list-group-item">
            <Icon IconSize=@IconSize.Large Name="IconName.Backward" />
            <a href="#" onclick="@(() => ViewModel.SetVisible(MenuPage.MainMenu))">Back</a>
        </li>

    </ul>
</Div>




