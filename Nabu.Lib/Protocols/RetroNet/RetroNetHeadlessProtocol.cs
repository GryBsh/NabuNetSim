using Gry;
using Gry.Protocols;
using Microsoft.Extensions.Logging;
using Nabu.Network;
using Nabu.Settings;
using Nabu.Sources;
using System.Text;
using System.Text.RegularExpressions;

namespace Nabu.Protocols.RetroNet;public partial class RetroNetHeadlessProtocol(    ILogger<RetroNetHeadlessProtocol> logger,    ISourceService sources,
    INabuNetwork network,
    GlobalSettings globalSettings) : Protocol<AdaptorSettings>(logger){    public override byte[] Messages { get; } = [       RetroNetCommands.RetroNetHeadless    ];    public override byte Version => 0x01;    const string Empty = " ";    #region Retronet Headless Ops    byte[] GetString(string message, int? count = null)    {        count ??= message.Length;        return [            (byte)count,            ..Bytes.SetLength(count.Value, Bytes.FromASCII(message)).ToArray()        ];    }    void GetParentName()    {        var item = GetSource();        Write(GetString(item?.Name ?? Empty));    }    void GetParentDescription()    {        var id = Read();        var item = sources.List.ElementAtOrDefault(id);        Write(            GetString(item?.Description ?? Empty, 64)        );    }    void GetChildCount()    {        var id = Read();        var item = sources.List.ElementAtOrDefault(id);        if (item is null) Write(0x00);        Write((byte)ProgramPage(network.Programs(item)).Count());    }    void GetChildName()    {        var parent = Read();        var child = Read();        var (parentItem, childItem) = GetItem(parent, child);        if (parentItem is null || childItem is null) Write(0x00);        else Write(            GetString(childItem.DisplayName ?? Empty)        );    }    void SetSelection()    {        var parent = Read();        var child = Read();        var (parentItem, childItem) = GetItem(parent, child);        if (parentItem is null || childItem is null) return;        SetReturn();        Adapter!.Source = parentItem.Name;        Adapter!.Program = childItem.Name;    }    private void SetReturn()
    {
        Adapter!.ReturnToSource = Adapter!.Source;
        Adapter!.ReturnToProgram = Adapter!.Program;
    }    void GetChildDescription()    {        var parent = Read();        var child = Read();        var (parentItem, childItem) = GetItem(parent, child);        if (parentItem is null || childItem is null) Write(0x00);        else Write(            GetString(childItem.Description ?? Empty, 64)        );    }    void GetChildAuthor()    {        var parent = Read();        var child = Read();        var (parentItem, childItem) = GetItem(parent, child);        if (parentItem is null || childItem is null) Write(0x00);        else Write(            GetString(childItem.Author ?? Empty)        );    }    void GetChildIconTileColor()    {        var parent = Read();        var child = Read();        var (parentItem, childItem) = GetItem(parent, child);        if (parentItem is null || childItem is null) Write(0x00);        else Write(            Convert.FromBase64String(childItem.TileColor)        );    }    void GetChildIconTilePattern()    {        var parent = Read();        var child = Read();        var (parentItem, childItem) = GetItem(parent, child);        if (parentItem is null || childItem is null) Write(0x00);        else Write(            Convert.FromBase64String(childItem.TilePattern)        );    }    const string message = "Welcome to NABU NetSim!";    static byte[] MessageBytes { get; } = Encoding.ASCII.GetBytes(message);    byte[] LongBinaryMessage {        get {            var phrase = Encoding.ASCII.GetBytes(ASCII().Replace(CommonUI.Phrase(), string.Empty));            return [..Bytes.FromUShort((ushort)phrase.Length), ..phrase];        }    }    byte[] BinaryMessage { get; } = Bytes.ToSizedASCII(message).ToArray();    byte[] Date { get; } = Bytes.ToSizedASCII(DateTime.Now.ToString("MMMM dd, yyyy")).ToArray();    #endregion    protected override Task Handle(byte unhandled, CancellationToken cancel)    {        var command = Read();        switch (command)        {            case RetroNetHeadless.GetParentCount:                Logger.LogInformation("GetParentCount");                Write((byte)sources.List.Count());                break;            case RetroNetHeadless.GetParentName:                Logger.LogInformation(nameof(GetParentName));                GetParentName();                break;            case RetroNetHeadless.GetParentDescription:                Logger.LogInformation(nameof(GetParentDescription));                GetParentDescription();                break;            case RetroNetHeadless.GetChildCount:                Logger.LogInformation(nameof(GetChildCount));                GetChildCount();                break;            case RetroNetHeadless.GetChildName:                Logger.LogInformation(nameof(GetChildName));                GetChildName();                break;            case RetroNetHeadless.SetSelection:                Logger.LogInformation(nameof(SetSelection));                SetSelection();                break;            case RetroNetHeadless.GetChildDescription:                Logger.LogInformation(nameof(GetChildDescription));                GetChildDescription();                break;            case RetroNetHeadless.GetChildAuthor:                Logger.LogInformation(nameof(GetChildAuthor));                GetChildAuthor();                break;            case RetroNetHeadless.GetNewsContent:                Logger.LogInformation("GetNewsContent");                Write(LongBinaryMessage);                break;            case RetroNetHeadless.GetChildIconTileColor:                Logger.LogInformation(nameof(GetChildIconTileColor));                GetChildIconTileColor();                break;            case RetroNetHeadless.GetChildIconTilePattern:                Logger.LogInformation(nameof(GetChildIconTilePattern));                GetChildIconTilePattern();                break;            case RetroNetHeadless.GetLog:                Logger.LogInformation("GetLog");                Write(LongBinaryMessage);                break;            case RetroNetHeadless.GetNewsTitle:                Logger.LogInformation("GetNewsTitle");                Write(BinaryMessage);                break;            case RetroNetHeadless.GetNewsDate:                Logger.LogInformation("GetNewsDate");                Write(Date);                break;            case RetroNetHeadless.GetNewsCount:                Logger.LogInformation("GetNewsCount");                Write(1);                break;            case RetroNetHeadless.GetNewsContentById:                Read();                Logger.LogInformation("GetNewsContentById");                Write(LongBinaryMessage);                break;            case RetroNetHeadless.GetNewsTitleById:                Read();                Logger.LogInformation("GetNewsTitleById");                Write(BinaryMessage);                break;            case RetroNetHeadless.GetNewsDateById:                Read();                Logger.LogInformation("GetNewsDateById");                Write(Date);                break;            case RetroNetHeadless.GetNewsIconTileColor:                Read();                Logger.LogInformation("GetNewsIconTileColor");                Write(Convert.FromBase64String(globalSettings.DefaultIconColor ?? CommonUI.BlankIconClrStr));                break;            case RetroNetHeadless.GetNewsIconTilePattern:                Read();                Logger.LogInformation("GetNewsIconTilePattern");                Write(Convert.FromBase64String(globalSettings.DefaultIconPattern ?? CommonUI.BlankIconPtrnStr));                break;            case RetroNetHeadless.GetOperatingSystem:                Logger.LogInformation("GetOperatingSystem");                byte os = 0 switch                {                    _ when OperatingSystem.IsWindows() => 0,                    _ when OperatingSystem.IsMacOS() => 1,                    _ when OperatingSystem.IsLinux() => 2,                    _ => 99                };                Write(os);                break;        }        return Task.CompletedTask;    }        #region Helpers    bool IsNotPakFile(NabuProgram? program)             => program is not null &&                !NabuLib.IsPakFile(program.Name);    IEnumerable<NabuProgram> ProgramPage(IEnumerable<NabuProgram> programs)        => programs.Where(IsNotPakFile);    ProgramSource? GetSource()    {        var id = Read();        return sources.List.ElementAtOrDefault(id);    }    (ProgramSource?, NabuProgram?) GetItem(byte parent, byte child)    {        var parentItem = sources.List.ElementAtOrDefault(parent);                return (            parentItem,            network.Programs(parentItem).ElementAtOrDefault(child)        );    }    #endregion    [GeneratedRegex("[^\\u0000-\\u007F]+")]    private static partial Regex ASCII();}